# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Python app to Azure Web App - app-python

on:
  push:
    branches:
      - main  # Déclenche le workflow lors d'un push vers la branche "main"
  workflow_dispatch:  # déclencher manuellement ce workflow

jobs:
  build:
    runs-on: ubuntu-latest # Exécute le job sur une machine Ubuntu

    steps:
      - uses: actions/checkout@v4

      # Étape 1 : Installer Make (nécessaire pour utiliser le Makefile)
      - name: Install make
        run: sudo apt-get update && sudo apt-get install -y make

      # Étape 2 : Initialiser l'environnement virtuel
      - name: Initialize virtual environment
        run: make init # Exécute la commande "make init" pour créer .venv

      # Étape 3 : Installer les dépendances
      - name: Install dependencies
        run: make install # Exécute la commande "make install" pour installer les dépendances

      # Étape 4 : Exécuter les tests
      - name: Run tests
        run: make test # Exécute la commande "make test" pour lancer les tests

      # Étape 5 : Construire l'image Docker
      - name: Build Docker image
        run: make build # Exécute la commande "make build" pour créer une image Docker

      # Étape 6 : supprimer les fichiers non necessaires
      - name: Clean cache files
        run: make clean

      # Étape 7 : Créer un artefact ZIP pour le déploiement
      - name: Zip artifact for deployment
        run: zip release.zip ./* -r

      # Étape 8 : Téléverser l'artefact pour l'étape prochaine de déploiement sur Azure
      # dans cette etape on vas exclut l'environnement virtuel crée .venv du fichier ZIP

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            release.zip
            !.venv/ # Exclut le dossier .venv

  deploy: # le job de deploiement en prod
    runs-on: ubuntu-latest # Exécute le job de déploiement sur une machine Ubuntu
    needs: build # Dépend du job "build", s'exécute uniquement si le build réussit
    environment:
      name: 'Production' # Définit l'environnement en tant que "Production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write # pour l'authentification avec Azure

    steps:
    # Étape 1 : Télécharger l'artefact créé lors du build
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app # Télécharge l'artefact nommé "python-app" que les job build à créer

      # Étape 2 : Décompresser l'artefact
      - name: Unzip artifact for deployment
        run: unzip release.zip

      # Étape 3 : Se connecter à Azure
      - name: Login to Azure
        uses: azure/login@v2
        with: # Utilise des secrets qu'on a declarer pour sécuriser les informations d'authentification Azure
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_297065EABF1B46BD820B4A6AD8F58C58 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_47920ADD4B784D8BB866CB251684C06A }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_60AE57FCE30E4FBAA509C5AC345DD0C6 }}

      # Étape 4 : Déployer sur Azure Web App
      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'app-python' # Nom de l'application Azure
          slot-name: 'Production' # Nom du l'environnement de déploiement
          
